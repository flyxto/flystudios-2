---
// File: src/components/PartnerLogos.astro

interface PartnerLogo {
  src: string;
  alt: string;
  width: string;
}

const partnerLogos: PartnerLogo[] = [
  { src: "/company/logos/aisecc.png", alt: "Partner 1 Logo", width:"120px" },
  { src: "/company/logos/ieeecsiit.png", alt: "Partner 2 Logo", width:"120px" },
  { src: "/company/logos/iit.png", alt: "Partner 3 Logo", width:"120px" },
  { src: "/company/logos/sliit.png", alt: "Partner 6 Logo", width:"120px" },
  { src: "/company/logos/uom.png", alt: "Partner 4 Logo", width:"80px"  },
  { src: "/company/logos/uomleo.png", alt: "Partner 5 Logo", width:"80px" },
];
---

<section class="w-full  ">
  <div class="container mx-auto px-4 md:px-6">
    <h2 class="text-3xl font-bold tracking-tight text-center text-blue-500 sm:text-4xl mb-8 animate-on-scroll">
      Our Partnerships
    </h2>
    <p class="mt-4 text-lg text-center leading-7 text-gray-600 mb-12 max-w-2xl mx-auto animate-on-scroll">
      We've become the <span class="font-semibold">Digital Media Partner</span> for events of numerous university clubs and institutions.
    </p>
    <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-8 items-center justify-items-center">
      {partnerLogos.map((logo, index) => (
        <div class="flex items-center justify-center w-full h-24 animate-on-scroll" style={`--animation-order: ${index + 1};`}>
          <img
            src={logo.src}
            alt={logo.alt}
            width={logo.width}
            height="80"
            class="max-w-full max-h-full object-contain"
          />
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .animate-on-scroll {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .animate-on-scroll.is-visible {
    opacity: 1;
    transform: translateY(0);
  }

  .animate-on-scroll[style^="--animation-order"] {
    transition-delay: calc(var(--animation-order) * 0.1s);
  }

  @media (prefers-reduced-motion: reduce) {
    .animate-on-scroll {
      transition: none;
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  function handleIntersection(entries, observer) {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        observer.unobserve(entry.target);
      }
    });
  }

  function setupIntersectionObserver() {
    const options = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observer = new IntersectionObserver(handleIntersection, options);
    const elements = document.querySelectorAll('.animate-on-scroll');

    elements.forEach((element) => {
      observer.observe(element);
    });
  }

  // Run on initial page load
  setupIntersectionObserver();

  // Run again when navigating between pages
  document.addEventListener('astro:page-load', setupIntersectionObserver);
</script>